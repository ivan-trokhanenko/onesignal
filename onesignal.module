<?php

/**
 * @file
 * Contains onesignal.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_page_attachments().
 */
function onesignal_page_attachments(&$attachments) {
  /** @var \Drupal\onesignal\OnesignalAccessInterface $access */
  $access = \Drupal::service('onesignal.access');
  if (!$access->check()) {
    return;
  }
  
  /** @var \Drupal\onesignal\Config\ConfigManager $config_manager */
  $config_manager = \Drupal::service('onesignal.config_manager');

  // Add head link to site root uploaded manifest.json file.
  $attachments['#attached']['html_head_link'][] = [
    [
      'rel' => "manifest",
      'href' => "/manifest.json",
    ],
    TRUE,
  ];
  // Attach the external library defined in the onesignal.libraries.yml file.
  $attachments['#attached']['library'][] = 'onesignal/global-scripts';
  /**
   * Here we build the OneSignal JS code using the variables set by the admin.
   * We if variables are configured before setting them up.
   * The objective is to reproduce OnSignal's code, more or less like this:
   * @code
   * var OneSignal = window.OneSignal || [];
   * OneSignal.push(function() {
   *   OneSignal.init({
   *     appId: "111111111111111111111111",
   *     autoRegister: false,
   *     notifyButton: {
   *       enable: true,
   *     },
   *   });
   * });
   * @endcode
   */
  $onesignal_javascript_header = '
  var OneSignal = window.OneSignal || [];
  OneSignal.push(function() {
    OneSignal.init({
      appId: "' . $config_manager->getAppId() . '",';

  if (!empty($config_manager->getSafariWebId())) {
    $onesignal_javascript_header .= '
      safari_web_id: "' . $config_manager->getSafariWebId() . '",';
  }

  if (!empty($config_manager->getAutoRegister())) {
    $onesignal_javascript_header .= '      
      autoRegister: "' . $config_manager->getAutoRegister() . '",';
  }

  if (!empty($config_manager->getLocalhostSecure())) {
    $onesignal_javascript_header .= '    
      allowLocalhostAsSecureOrigin: true,';
  }

  if (!empty($config_manager->getNotifyButton())) {
    $onesignal_javascript_header .= ' 
      notifyButton: {   
        enable: "' . $config_manager->getNotifyButton() . '",
      },';
  }

  // Print welcomeNotification block.
  if (!empty($config_manager->getWelcomeTitle()) || !empty($config_manager->getWelcomeMessage())) {
    $onesignal_javascript_header .= '    
      welcomeNotification: {';
    if (!empty($config_manager->getWelcomeTitle())) {
      $onesignal_javascript_header .= '    
        title: "' . $config_manager->getWelcomeTitle() . '",';
    }
    if (!empty($config_manager->getWelcomeMessage())) {
      $onesignal_javascript_header .= '    
        message: "' . $config_manager->getWelcomeMessage() . '",';
    }
    $onesignal_javascript_header .= '    
      },';
  }

  // Print promptOptions block.
  if (!empty($config_manager->getActionMessage()) || !empty($config_manager->getAcceptButtonText()) || !empty($config_manager->getCancelButtonText())) {
    $onesignal_javascript_header .= '    
      promptOptions: {';
    if (!empty($config_manager->getActionMessage())) {
      $onesignal_javascript_header .= '    
        actionMessage: "' . $config_manager->getActionMessage() . '",';
    }
    if (!empty($config_manager->getAcceptButtonText())) {
      $onesignal_javascript_header .= '    
        acceptButtonText: "' . $config_manager->getAcceptButtonText() . '",';
    }
    if (!empty($config_manager->getCancelButtonText())) {
      $onesignal_javascript_header .= '    
        cancelButtonText: "' . $config_manager->getCancelButtonText() . '",';
    }
    $onesignal_javascript_header .= '    
      }
  ';
  }

  // Close the Onsignal initialization code.
  $onesignal_javascript_header .= '    
    });
  });
  ';
  // TODO Add cache.
  $attachments['#attached']['html_head'][] = [
    // The data.
    [
      // Add a <script> tag.
      '#tag' => 'script',
      // Add the JavaScript code to the <script> tag.
      '#value' => Markup::create($onesignal_javascript_header),
      // Set a weight so this code appears after meta tags, etc.
      '#weight' => -1,
    ],
    // A key, to recognize this HTML <HEAD> element when altering.
    'onesignal-js',
  ];
}

/**
 * Implements hook_help().
 */
function onesignal_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the onesignal module.
    case 'help.page.onesignal':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides integration with the free HTTP Web Push service from OneSignal  allowing visitors to subscribe for notifications and site owners to send notifications to the subscribers.') . '</p>';
      $output .= '<h3>' . t('Prerequisites') . '</h3>';
      $output .= '<p>' . t('You must create an account at @url to configure your Web app, obtain an App ID and download some files.', [
          '@url' => Link::fromTextAndUrl('OneSignal.com', Url::fromUri('https://onesignal.com', []))
            ->toString(),
        ]) . '</p>';
      $output .= '<p>' . t('Once you have created your account at OneSignal.com:') . '</p>';
      $output .= '<ol>';
      $output .= '<li>' . t('Add a new app') . '</li>';
      $output .= '<li>' . t('On the &quot;Select one platform&quot; screen, chose &quot;Web Push&quot;') . '</li>';
      $output .= '<li>' . t('On the &quot;Chose Integration&quot; screen, chose &quot;Custom Code&quot;') . '</li>';
      $output .= '<li>' . t('Enter your site name, URL and Icon URL.') . '</li>';
      $output .= '<li>' . t('Click &quot;Save&quot;') . '</li>';
      $output .= '</ol>';
      $output .= '<p>' . t('At this point you will be given a link to download the <strong>OneSignal SDK</strong> files. Download the Zip file, extract the content, and upload the following three files to the root of your website:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('manifest.json') . '</li>';
      $output .= '<li>' . t('OneSignalSDKUpdaterWorker.js') . '</li>';
      $output .= '<li>' . t('OneSignalSDKWorker.js') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('OneSignal will give you also a code to add to the <strong><em>&lt;head&gt;</em></strong> of your site; however YOU DON\'T NEED THE FULL CODE, all you need from this code is your <em><strong>appId</strong></em>.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('This module defines the permission <em>Administer OneSignal settings</em>. Users should be granted this permission before they can make changes to the configurations of this module.') . '</p>';
      $output .= '<p>' . t('To configure this module, go to: <em><strong>Configuration &gt; Web services &gt; OneSignal</strong></em>') . '</p>';
      $output .= '<p>' . t('Provide the required parameters as instructed on that page.') . '</p>';

      return $output;

    default:
  }
}


/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 */
function onesignal_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['onesignal'] = [
    '#type' => 'details',
    '#title' => t('OneSignal settings'),
    '#access' => \Drupal::currentUser()->hasPermission('administer onesignal'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#tree' => TRUE,
    '#weight' => 100,
  ];
  $form['onesignal']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Send push notification'),
    '#default_value' => TRUE,
  ];
  // TODO. Add custom submit.
}

/**
 * Implements hook_entity_insert().
 */
function onesignal_entity_insert(EntityInterface $entity) {
//  \Drupal::service('onesignal.generator')->createNotification($entity, 'insert');
}

/**
 * Implements hook_entity_update().
 */
function onesignal_entity_update(EntityInterface $entity) {
//  \Drupal::service('onesignal.generator')->createNotification($entity, 'update');
}


/**
 * Validate the pattern field, to ensure it doesn't contain any characters that
 * are invalid.
 */
function onesignal_pattern_validate($element, FormStateInterface $form_state) {
  
  if (isset($element['#value'])) {
    $title = empty($element['#title']) ? $element['#parents'][0] : $element['#title'];
    $invalid_characters = ['#', '?', '&'];
    $invalid_characters_used = [];
    
    foreach ($invalid_characters as $invalid_character) {
      if (strpos($element['#value'], $invalid_character) !== FALSE) {
        $invalid_characters_used[] = $invalid_character;
      }
    }
    
    if (!empty($invalid_characters_used)) {
      $form_state->setError($element, t('The %element-title is using the following invalid characters: @invalid-characters.', array('%element-title' => $title, '@invalid-characters' => implode(', ', $invalid_characters_used))));
    }
    
    if (preg_match('/(\s$)+/', $element['#value'])) {
      $form_state->setError($element, t('The %element-title doesn\'t allow the patterns ending with whitespace.', array('%element-title' => $title)));
    }
  }
  
  return $element;
  
}
